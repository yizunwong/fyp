/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace Traceability {
      
    export type ProduceStruct = {batchId: string, produceHash: string, qrHash: string, farmer: AddressLike, timestamp: BigNumberish}

    export type ProduceStructOutput = [batchId: string, produceHash: string, qrHash: string, farmer: string, timestamp: bigint] & {batchId: string, produceHash: string, qrHash: string, farmer: string, timestamp: bigint }
  
    }

  export interface TraceabilityInterface extends Interface {
    getFunction(nameOrSignature: "getProduce" | "recordProduce" | "verifyProduce"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ProduceRecorded"): EventFragment;

    encodeFunctionData(functionFragment: 'getProduce', values: [string]): string;
encodeFunctionData(functionFragment: 'recordProduce', values: [string, string, string]): string;
encodeFunctionData(functionFragment: 'verifyProduce', values: [string, string]): string;

    decodeFunctionResult(functionFragment: 'getProduce', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recordProduce', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyProduce', data: BytesLike): Result;
  }

  
    export namespace ProduceRecordedEvent {
      export type InputTuple = [batchId: string, farmer: AddressLike, produceHash: string, qrHash: string, timestamp: BigNumberish];
      export type OutputTuple = [batchId: string, farmer: string, produceHash: string, qrHash: string, timestamp: bigint];
      export interface OutputObject {batchId: string, farmer: string, produceHash: string, qrHash: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Traceability extends BaseContract {
    
    connect(runner?: ContractRunner | null): Traceability;
    waitForDeployment(): Promise<this>;

    interface: TraceabilityInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getProduce: TypedContractMethod<
      [batchId: string, ],
      [Traceability.ProduceStructOutput],
      'view'
    >
    

    
    recordProduce: TypedContractMethod<
      [batchId: string, produceHash: string, qrHash: string, ],
      [void],
      'nonpayable'
    >
    

    
    verifyProduce: TypedContractMethod<
      [batchId: string, hashToCheck: string, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getProduce'): TypedContractMethod<
      [batchId: string, ],
      [Traceability.ProduceStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'recordProduce'): TypedContractMethod<
      [batchId: string, produceHash: string, qrHash: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifyProduce'): TypedContractMethod<
      [batchId: string, hashToCheck: string, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'ProduceRecorded'): TypedContractEvent<ProduceRecordedEvent.InputTuple, ProduceRecordedEvent.OutputTuple, ProduceRecordedEvent.OutputObject>;

    filters: {
      
      'ProduceRecorded(string,address,string,string,uint256)': TypedContractEvent<ProduceRecordedEvent.InputTuple, ProduceRecordedEvent.OutputTuple, ProduceRecordedEvent.OutputObject>;
      ProduceRecorded: TypedContractEvent<ProduceRecordedEvent.InputTuple, ProduceRecordedEvent.OutputTuple, ProduceRecordedEvent.OutputObject>;
    
    };
  }