/**
 * Generated by orval v7.13.1 🍺
 * Do not edit manually.
 * My API
 * The backend API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customFetcher } from "./fetch";
export type CreateUserDtoRole =
  (typeof CreateUserDtoRole)[keyof typeof CreateUserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserDtoRole = {
  FARMER: "FARMER",
  RETAILER: "RETAILER",
  GOVERNMENT_AGENCY: "GOVERNMENT_AGENCY",
  ADMIN: "ADMIN",
} as const;

export interface CreateUserDto {
  email: string;
  username: string;
  password: string;
  role?: CreateUserDtoRole;
}

export interface LoginDto {
  email: string;
  password: string;
}

export type CreateFarmDtoDocuments = { [key: string]: unknown };

export interface CreateFarmDto {
  name: string;
  location: string;
  documents: CreateFarmDtoDocuments;
}

export interface RequestSubsidyDto {
  amount: number;
  weatherEventId: string;
}

export interface CreateProduceDto {
  name: string;
  batchId: string;
  harvestDate: string;
}

export type AuthControllerGoogleAuthRedirectParams = {
  state: string;
};

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/`, method: "GET", signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerCreate = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/user`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getUserControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["userControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = CreateUserDto;
export type UserControllerCreateMutationError = unknown;

export const useUserControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const userControllerFindAll = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/user`, method: "GET", signal });
};

export const getUserControllerFindAllQueryKey = () => {
  return [`/user`] as const;
};

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = unknown;

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUserControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerLogin = (
  loginDto: LoginDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginDto,
    signal,
  });
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerRegister = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getAuthControllerRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["authControllerRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = CreateUserDto;
export type AuthControllerRegisterMutationError = unknown;

export const useAuthControllerRegister = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerProfile = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/auth/profile`, method: "GET", signal });
};

export const getAuthControllerProfileQueryKey = () => {
  return [`/auth/profile`] as const;
};

export const getAuthControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerProfile>>
  > = ({ signal }) => authControllerProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = unknown;

export function useAuthControllerProfile<
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerGoogleAuth = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/auth/google`, method: "GET", signal });
};

export const getAuthControllerGoogleAuthQueryKey = () => {
  return [`/auth/google`] as const;
};

export const getAuthControllerGoogleAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>
  > = ({ signal }) => authControllerGoogleAuth(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerGoogleAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerGoogleAuthQueryError = unknown;

export function useAuthControllerGoogleAuth<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerGoogleAuthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerGoogleAuthRedirect = (
  params: AuthControllerGoogleAuthRedirectParams,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/auth/google/callback`,
    method: "GET",
    params,
    signal,
  });
};

export const getAuthControllerGoogleAuthRedirectQueryKey = (
  params?: AuthControllerGoogleAuthRedirectParams,
) => {
  return [`/auth/google/callback`, ...(params ? [params] : [])] as const;
};

export const getAuthControllerGoogleAuthRedirectQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>,
  TError = unknown,
>(
  params: AuthControllerGoogleAuthRedirectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAuthControllerGoogleAuthRedirectQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>
  > = ({ signal }) => authControllerGoogleAuthRedirect(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerGoogleAuthRedirectQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>
>;
export type AuthControllerGoogleAuthRedirectQueryError = unknown;

export function useAuthControllerGoogleAuthRedirect<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>,
  TError = unknown,
>(
  params: AuthControllerGoogleAuthRedirectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleAuthRedirect>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerGoogleAuthRedirectQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerCreateFarm = (
  id: string,
  createFarmDto: CreateFarmDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farm`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createFarmDto,
    signal,
  });
};

export const getFarmerControllerCreateFarmMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
    TError,
    { id: string; data: CreateFarmDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
  TError,
  { id: string; data: CreateFarmDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateFarm"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
    { id: string; data: CreateFarmDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return farmerControllerCreateFarm(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateFarmMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>
>;
export type FarmerControllerCreateFarmMutationBody = CreateFarmDto;
export type FarmerControllerCreateFarmMutationError = unknown;

export const useFarmerControllerCreateFarm = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
    TError,
    { id: string; data: CreateFarmDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
  TError,
  { id: string; data: CreateFarmDto },
  TContext
> => {
  const mutationOptions = getFarmerControllerCreateFarmMutationOptions(options);

  return useMutation(mutationOptions);
};

export const farmerControllerFindFarms = (id: string, signal?: AbortSignal) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farm`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindFarmsQueryKey = (id?: string) => {
  return [`/farmer/${id}/farm`] as const;
};

export const getFarmerControllerFindFarmsQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindFarms>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFarmerControllerFindFarmsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindFarms>>
  > = ({ signal }) => farmerControllerFindFarms(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindFarms>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FarmerControllerFindFarmsQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindFarms>>
>;
export type FarmerControllerFindFarmsQueryError = unknown;

export function useFarmerControllerFindFarms<
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindFarms>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFarmerControllerFindFarmsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerCreateSubsidy = (
  id: string,
  requestSubsidyDto: RequestSubsidyDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/subsidy`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: requestSubsidyDto,
    signal,
  });
};

export const getFarmerControllerCreateSubsidyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
    TError,
    { id: string; data: RequestSubsidyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
  TError,
  { id: string; data: RequestSubsidyDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateSubsidy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
    { id: string; data: RequestSubsidyDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return farmerControllerCreateSubsidy(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateSubsidyMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>
>;
export type FarmerControllerCreateSubsidyMutationBody = RequestSubsidyDto;
export type FarmerControllerCreateSubsidyMutationError = unknown;

export const useFarmerControllerCreateSubsidy = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
    TError,
    { id: string; data: RequestSubsidyDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
  TError,
  { id: string; data: RequestSubsidyDto },
  TContext
> => {
  const mutationOptions =
    getFarmerControllerCreateSubsidyMutationOptions(options);

  return useMutation(mutationOptions);
};

export const farmerControllerFindSubsidies = (
  id: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/subsidy`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindSubsidiesQueryKey = (id?: string) => {
  return [`/farmer/${id}/subsidy`] as const;
};

export const getFarmerControllerFindSubsidiesQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFarmerControllerFindSubsidiesQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
  > = ({ signal }) => farmerControllerFindSubsidies(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FarmerControllerFindSubsidiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
>;
export type FarmerControllerFindSubsidiesQueryError = unknown;

export function useFarmerControllerFindSubsidies<
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFarmerControllerFindSubsidiesQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerCreateProduce = (
  id: string,
  farmId: string,
  createProduceDto: CreateProduceDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farms/${farmId}/produce`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createProduceDto,
    signal,
  });
};

export const getFarmerControllerCreateProduceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
    TError,
    { id: string; farmId: string; data: CreateProduceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
  TError,
  { id: string; farmId: string; data: CreateProduceDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateProduce"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
    { id: string; farmId: string; data: CreateProduceDto }
  > = (props) => {
    const { id, farmId, data } = props ?? {};

    return farmerControllerCreateProduce(id, farmId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateProduceMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>
>;
export type FarmerControllerCreateProduceMutationBody = CreateProduceDto;
export type FarmerControllerCreateProduceMutationError = unknown;

export const useFarmerControllerCreateProduce = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
    TError,
    { id: string; farmId: string; data: CreateProduceDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
  TError,
  { id: string; farmId: string; data: CreateProduceDto },
  TContext
> => {
  const mutationOptions =
    getFarmerControllerCreateProduceMutationOptions(options);

  return useMutation(mutationOptions);
};

export const farmerControllerFindProduces = (
  id: string,
  farmId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farms/${farmId}/produce`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindProducesQueryKey = (
  id?: string,
  farmId?: string,
) => {
  return [`/farmer/${id}/farms/${farmId}/produce`] as const;
};

export const getFarmerControllerFindProducesQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindProduces>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFarmerControllerFindProducesQueryKey(id, farmId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindProduces>>
  > = ({ signal }) => farmerControllerFindProduces(id, farmId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(id && farmId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindProduces>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FarmerControllerFindProducesQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindProduces>>
>;
export type FarmerControllerFindProducesQueryError = unknown;

export function useFarmerControllerFindProduces<
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof farmerControllerFindProduces>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFarmerControllerFindProducesQueryOptions(
    id,
    farmId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const verifyControllerVerifyBatch = (
  batchId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/verify/${batchId}`,
    method: "GET",
    signal,
  });
};

export const getVerifyControllerVerifyBatchQueryKey = (batchId?: string) => {
  return [`/verify/${batchId}`] as const;
};

export const getVerifyControllerVerifyBatchQueryOptions = <
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getVerifyControllerVerifyBatchQueryKey(batchId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
  > = ({ signal }) => verifyControllerVerifyBatch(batchId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!batchId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type VerifyControllerVerifyBatchQueryResult = NonNullable<
  Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
>;
export type VerifyControllerVerifyBatchQueryError = unknown;

export function useVerifyControllerVerifyBatch<
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getVerifyControllerVerifyBatchQueryOptions(
    batchId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
