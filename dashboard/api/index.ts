/**
 * Generated by orval v7.13.1 🍺
 * Do not edit manually.
 * My API
 * The backend API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customFetcher } from "./fetch";
export type CommonResponseDtoData = { [key: string]: unknown };

export interface CommonResponseDto {
  statusCode: number;
  message: string;
  data?: CommonResponseDtoData;
  count?: number;
}

export type UserResponseDtoRole =
  (typeof UserResponseDtoRole)[keyof typeof UserResponseDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserResponseDtoRole = {
  FARMER: "FARMER",
  RETAILER: "RETAILER",
  GOVERNMENT_AGENCY: "GOVERNMENT_AGENCY",
  ADMIN: "ADMIN",
} as const;

export interface UserResponseDto {
  id: string;
  email: string;
  username: string;
  role: UserResponseDtoRole;
}

export type CreateUserDtoRole =
  (typeof CreateUserDtoRole)[keyof typeof CreateUserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserDtoRole = {
  FARMER: "FARMER",
  RETAILER: "RETAILER",
  GOVERNMENT_AGENCY: "GOVERNMENT_AGENCY",
  ADMIN: "ADMIN",
} as const;

export interface CreateUserDto {
  email: string;
  username: string;
  nric: string;
  phone?: string;
  provider?: string;
  providerId?: string;
  role?: CreateUserDtoRole;
}

export interface TokenPairResponseDto {
  access_token: string;
  refresh_token: string;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface AccessTokenResponseDto {
  access_token: string;
}

export interface RefreshTokenDto {
  /** Refresh token for mobile clients */
  refresh_token?: string;
}

export interface LogoutResponseDto {
  success: boolean;
}

export type ProfileResponseDtoRole =
  (typeof ProfileResponseDtoRole)[keyof typeof ProfileResponseDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileResponseDtoRole = {
  FARMER: "FARMER",
  RETAILER: "RETAILER",
  GOVERNMENT_AGENCY: "GOVERNMENT_AGENCY",
  ADMIN: "ADMIN",
} as const;

export interface ProfileResponseDto {
  id: string;
  email: string;
  role: ProfileResponseDtoRole;
}

export type CreateFarmDtoDocuments = { [key: string]: unknown };

export interface CreateFarmDto {
  name: string;
  location: string;
  /** Farm size in hectares */
  size: number;
  /** Produce categories grown on the farm */
  produceCategories: string[];
  documents: CreateFarmDtoDocuments;
}

export type FarmListRespondDtoDocuments = { [key: string]: unknown };

export interface FarmListRespondDto {
  id: string;
  name: string;
  location: string;
  /** Farm size in hectares */
  size: number;
  produceCategories: string[];
  documents: FarmListRespondDtoDocuments;
  produces: string[];
}

export interface UpdateFarmDto {
  [key: string]: unknown;
}

export interface RequestSubsidyDto {
  amount: number;
  weatherEventId: string;
}

export interface CreateProduceDto {
  name: string;
  category: string;
  batchId: string;
  harvestDate: string;
}

export type UserControllerCreate200AllOf = {
  data?: UserResponseDto;
};

export type UserControllerCreate200 = CommonResponseDto &
  UserControllerCreate200AllOf;

export type UserControllerFindAll200AllOf = {
  data?: UserResponseDto[];
};

export type UserControllerFindAll200 = CommonResponseDto &
  UserControllerFindAll200AllOf;

export type AuthControllerLogin200AllOf = {
  data?: TokenPairResponseDto;
};

export type AuthControllerLogin200 = CommonResponseDto &
  AuthControllerLogin200AllOf;

export type AuthControllerRefresh200AllOf = {
  data?: AccessTokenResponseDto;
};

export type AuthControllerRefresh200 = CommonResponseDto &
  AuthControllerRefresh200AllOf;

export type AuthControllerLogout200AllOf = {
  data?: LogoutResponseDto;
};

export type AuthControllerLogout200 = CommonResponseDto &
  AuthControllerLogout200AllOf;

export type AuthControllerRegister200AllOf = {
  data?: TokenPairResponseDto;
};

export type AuthControllerRegister200 = CommonResponseDto &
  AuthControllerRegister200AllOf;

export type AuthControllerProfile200AllOf = {
  data?: ProfileResponseDto;
};

export type AuthControllerProfile200 = CommonResponseDto &
  AuthControllerProfile200AllOf;

export type AuthControllerGoogleAuthCallback200AllOf = {
  data?: TokenPairResponseDto;
};

export type AuthControllerGoogleAuthCallback200 = CommonResponseDto &
  AuthControllerGoogleAuthCallback200AllOf;

export type FarmerControllerFindFarms200AllOf = {
  data?: FarmListRespondDto[];
};

export type FarmerControllerFindFarms200 = CommonResponseDto &
  FarmerControllerFindFarms200AllOf;

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/`, method: "GET", signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerCreate = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customFetcher<UserControllerCreate200>({
    url: `/user`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getUserControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["userControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = CreateUserDto;
export type UserControllerCreateMutationError = unknown;

export const useUserControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerCreate>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userControllerFindAll = (signal?: AbortSignal) => {
  return customFetcher<UserControllerFindAll200>({
    url: `/user`,
    method: "GET",
    signal,
  });
};

export const getUserControllerFindAllQueryKey = () => {
  return [`/user`] as const;
};

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = unknown;

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerLogin = (
  loginDto: LoginDto,
  signal?: AbortSignal,
) => {
  return customFetcher<AuthControllerLogin200>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginDto,
    signal,
  });
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerRefresh = (
  refreshTokenDto: RefreshTokenDto,
  signal?: AbortSignal,
) => {
  return customFetcher<AuthControllerRefresh200>({
    url: `/auth/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenDto,
    signal,
  });
};

export const getAuthControllerRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    { data: RefreshTokenDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationKey = ["authControllerRefresh"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    { data: RefreshTokenDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefresh>>
>;
export type AuthControllerRefreshMutationBody = RefreshTokenDto;
export type AuthControllerRefreshMutationError = unknown;

export const useAuthControllerRefresh = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRefresh>>,
      TError,
      { data: RefreshTokenDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerLogout = (
  refreshTokenDto: RefreshTokenDto,
  signal?: AbortSignal,
) => {
  return customFetcher<AuthControllerLogout200>({
    url: `/auth/logout`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenDto,
    signal,
  });
};

export const getAuthControllerLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    { data: RefreshTokenDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationKey = ["authControllerLogout"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    { data: RefreshTokenDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogout(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;
export type AuthControllerLogoutMutationBody = RefreshTokenDto;
export type AuthControllerLogoutMutationError = unknown;

export const useAuthControllerLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogout>>,
      TError,
      { data: RefreshTokenDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerRegister = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customFetcher<AuthControllerRegister200>({
    url: `/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getAuthControllerRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["authControllerRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = CreateUserDto;
export type AuthControllerRegisterMutationError = unknown;

export const useAuthControllerRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRegister>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerProfile = (signal?: AbortSignal) => {
  return customFetcher<AuthControllerProfile200>({
    url: `/auth/profile`,
    method: "GET",
    signal,
  });
};

export const getAuthControllerProfileQueryKey = () => {
  return [`/auth/profile`] as const;
};

export const getAuthControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerProfile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerProfile>>
  > = ({ signal }) => authControllerProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = unknown;

export function useAuthControllerProfile<
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerProfile<
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerProfile<
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerProfile<
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerGoogleAuth = (signal?: AbortSignal) => {
  return customFetcher<void>({ url: `/auth/google`, method: "GET", signal });
};

export const getAuthControllerGoogleAuthQueryKey = () => {
  return [`/auth/google`] as const;
};

export const getAuthControllerGoogleAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleAuth>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>
  > = ({ signal }) => authControllerGoogleAuth(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGoogleAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerGoogleAuthQueryError = unknown;

export function useAuthControllerGoogleAuth<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGoogleAuth>>,
          TError,
          Awaited<ReturnType<typeof authControllerGoogleAuth>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGoogleAuth<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGoogleAuth>>,
          TError,
          Awaited<ReturnType<typeof authControllerGoogleAuth>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGoogleAuth<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerGoogleAuth<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGoogleAuthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerGoogleAuthCallback = (signal?: AbortSignal) => {
  return customFetcher<AuthControllerGoogleAuthCallback200>({
    url: `/auth/google/callback`,
    method: "GET",
    signal,
  });
};

export const getAuthControllerGoogleAuthCallbackQueryKey = () => {
  return [`/auth/google/callback`] as const;
};

export const getAuthControllerGoogleAuthCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthCallbackQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
  > = ({ signal }) => authControllerGoogleAuthCallback(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGoogleAuthCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
>;
export type AuthControllerGoogleAuthCallbackQueryError = unknown;

export function useAuthControllerGoogleAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGoogleAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGoogleAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerGoogleAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGoogleAuthCallbackQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerCreateFarm = (
  id: string,
  createFarmDto: CreateFarmDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farm`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createFarmDto,
    signal,
  });
};

export const getFarmerControllerCreateFarmMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
    TError,
    { id: string; data: CreateFarmDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
  TError,
  { id: string; data: CreateFarmDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateFarm"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
    { id: string; data: CreateFarmDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return farmerControllerCreateFarm(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateFarmMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>
>;
export type FarmerControllerCreateFarmMutationBody = CreateFarmDto;
export type FarmerControllerCreateFarmMutationError = unknown;

export const useFarmerControllerCreateFarm = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
      TError,
      { id: string; data: CreateFarmDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateFarm>>,
  TError,
  { id: string; data: CreateFarmDto },
  TContext
> => {
  const mutationOptions = getFarmerControllerCreateFarmMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const farmerControllerFindFarms = (id: string, signal?: AbortSignal) => {
  return customFetcher<FarmerControllerFindFarms200>({
    url: `/farmer/${id}/farm`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindFarmsQueryKey = (id?: string) => {
  return [`/farmer/${id}/farm`] as const;
};

export const getFarmerControllerFindFarmsQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindFarms>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFarmerControllerFindFarmsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindFarms>>
  > = ({ signal }) => farmerControllerFindFarms(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindFarms>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FarmerControllerFindFarmsQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindFarms>>
>;
export type FarmerControllerFindFarmsQueryError = unknown;

export function useFarmerControllerFindFarms<
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindFarms>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindFarms>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindFarms>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindFarms<
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindFarms>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindFarms>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindFarms>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindFarms<
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindFarms>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFarmerControllerFindFarms<
  TData = Awaited<ReturnType<typeof farmerControllerFindFarms>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindFarms>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFarmerControllerFindFarmsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerUpdateFarm = (
  id: string,
  farmId: string,
  updateFarmDto: UpdateFarmDto,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farm/${farmId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateFarmDto,
  });
};

export const getFarmerControllerUpdateFarmMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerUpdateFarm>>,
    TError,
    { id: string; farmId: string; data: UpdateFarmDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerUpdateFarm>>,
  TError,
  { id: string; farmId: string; data: UpdateFarmDto },
  TContext
> => {
  const mutationKey = ["farmerControllerUpdateFarm"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerUpdateFarm>>,
    { id: string; farmId: string; data: UpdateFarmDto }
  > = (props) => {
    const { id, farmId, data } = props ?? {};

    return farmerControllerUpdateFarm(id, farmId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerUpdateFarmMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerUpdateFarm>>
>;
export type FarmerControllerUpdateFarmMutationBody = UpdateFarmDto;
export type FarmerControllerUpdateFarmMutationError = unknown;

export const useFarmerControllerUpdateFarm = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof farmerControllerUpdateFarm>>,
      TError,
      { id: string; farmId: string; data: UpdateFarmDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerUpdateFarm>>,
  TError,
  { id: string; farmId: string; data: UpdateFarmDto },
  TContext
> => {
  const mutationOptions = getFarmerControllerUpdateFarmMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const farmerControllerDeleteFarm = (id: string, farmId: string) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farm/${farmId}`,
    method: "DELETE",
  });
};

export const getFarmerControllerDeleteFarmMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerDeleteFarm>>,
    TError,
    { id: string; farmId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerDeleteFarm>>,
  TError,
  { id: string; farmId: string },
  TContext
> => {
  const mutationKey = ["farmerControllerDeleteFarm"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerDeleteFarm>>,
    { id: string; farmId: string }
  > = (props) => {
    const { id, farmId } = props ?? {};

    return farmerControllerDeleteFarm(id, farmId);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerDeleteFarmMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerDeleteFarm>>
>;

export type FarmerControllerDeleteFarmMutationError = unknown;

export const useFarmerControllerDeleteFarm = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof farmerControllerDeleteFarm>>,
      TError,
      { id: string; farmId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerDeleteFarm>>,
  TError,
  { id: string; farmId: string },
  TContext
> => {
  const mutationOptions = getFarmerControllerDeleteFarmMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const farmerControllerCreateSubsidy = (
  id: string,
  requestSubsidyDto: RequestSubsidyDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/subsidy`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: requestSubsidyDto,
    signal,
  });
};

export const getFarmerControllerCreateSubsidyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
    TError,
    { id: string; data: RequestSubsidyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
  TError,
  { id: string; data: RequestSubsidyDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateSubsidy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
    { id: string; data: RequestSubsidyDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return farmerControllerCreateSubsidy(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateSubsidyMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>
>;
export type FarmerControllerCreateSubsidyMutationBody = RequestSubsidyDto;
export type FarmerControllerCreateSubsidyMutationError = unknown;

export const useFarmerControllerCreateSubsidy = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
      TError,
      { id: string; data: RequestSubsidyDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateSubsidy>>,
  TError,
  { id: string; data: RequestSubsidyDto },
  TContext
> => {
  const mutationOptions =
    getFarmerControllerCreateSubsidyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const farmerControllerFindSubsidies = (
  id: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/subsidy`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindSubsidiesQueryKey = (id?: string) => {
  return [`/farmer/${id}/subsidy`] as const;
};

export const getFarmerControllerFindSubsidiesQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFarmerControllerFindSubsidiesQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
  > = ({ signal }) => farmerControllerFindSubsidies(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FarmerControllerFindSubsidiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
>;
export type FarmerControllerFindSubsidiesQueryError = unknown;

export function useFarmerControllerFindSubsidies<
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindSubsidies<
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindSubsidies>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindSubsidies<
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFarmerControllerFindSubsidies<
  TData = Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindSubsidies>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFarmerControllerFindSubsidiesQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const farmerControllerCreateProduce = (
  id: string,
  farmId: string,
  createProduceDto: CreateProduceDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farms/${farmId}/produce`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createProduceDto,
    signal,
  });
};

export const getFarmerControllerCreateProduceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
    TError,
    { id: string; farmId: string; data: CreateProduceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
  TError,
  { id: string; farmId: string; data: CreateProduceDto },
  TContext
> => {
  const mutationKey = ["farmerControllerCreateProduce"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
    { id: string; farmId: string; data: CreateProduceDto }
  > = (props) => {
    const { id, farmId, data } = props ?? {};

    return farmerControllerCreateProduce(id, farmId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FarmerControllerCreateProduceMutationResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>
>;
export type FarmerControllerCreateProduceMutationBody = CreateProduceDto;
export type FarmerControllerCreateProduceMutationError = unknown;

export const useFarmerControllerCreateProduce = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
      TError,
      { id: string; farmId: string; data: CreateProduceDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof farmerControllerCreateProduce>>,
  TError,
  { id: string; farmId: string; data: CreateProduceDto },
  TContext
> => {
  const mutationOptions =
    getFarmerControllerCreateProduceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const farmerControllerFindProduces = (
  id: string,
  farmId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/farmer/${id}/farms/${farmId}/produce`,
    method: "GET",
    signal,
  });
};

export const getFarmerControllerFindProducesQueryKey = (
  id?: string,
  farmId?: string,
) => {
  return [`/farmer/${id}/farms/${farmId}/produce`] as const;
};

export const getFarmerControllerFindProducesQueryOptions = <
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindProduces>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFarmerControllerFindProducesQueryKey(id, farmId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof farmerControllerFindProduces>>
  > = ({ signal }) => farmerControllerFindProduces(id, farmId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(id && farmId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof farmerControllerFindProduces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FarmerControllerFindProducesQueryResult = NonNullable<
  Awaited<ReturnType<typeof farmerControllerFindProduces>>
>;
export type FarmerControllerFindProducesQueryError = unknown;

export function useFarmerControllerFindProduces<
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindProduces>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindProduces>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindProduces>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindProduces<
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindProduces>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof farmerControllerFindProduces>>,
          TError,
          Awaited<ReturnType<typeof farmerControllerFindProduces>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFarmerControllerFindProduces<
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindProduces>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFarmerControllerFindProduces<
  TData = Awaited<ReturnType<typeof farmerControllerFindProduces>>,
  TError = unknown,
>(
  id: string,
  farmId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof farmerControllerFindProduces>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFarmerControllerFindProducesQueryOptions(
    id,
    farmId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const verifyControllerVerifyBatch = (
  batchId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/verify/${batchId}`,
    method: "GET",
    signal,
  });
};

export const getVerifyControllerVerifyBatchQueryKey = (batchId?: string) => {
  return [`/verify/${batchId}`] as const;
};

export const getVerifyControllerVerifyBatchQueryOptions = <
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getVerifyControllerVerifyBatchQueryKey(batchId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
  > = ({ signal }) => verifyControllerVerifyBatch(batchId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!batchId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifyControllerVerifyBatchQueryResult = NonNullable<
  Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
>;
export type VerifyControllerVerifyBatchQueryError = unknown;

export function useVerifyControllerVerifyBatch<
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
          TError,
          Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVerifyControllerVerifyBatch<
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
          TError,
          Awaited<ReturnType<typeof verifyControllerVerifyBatch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVerifyControllerVerifyBatch<
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useVerifyControllerVerifyBatch<
  TData = Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
  TError = unknown,
>(
  batchId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof verifyControllerVerifyBatch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVerifyControllerVerifyBatchQueryOptions(
    batchId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
